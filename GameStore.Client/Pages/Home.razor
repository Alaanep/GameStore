@page "/"
@using Models;
@inject NavigationManager NavigationManager;
@inject GameClient client;

<PageTitle>Game Catalog</PageTitle>

<h1>Game Catalog</h1>

<div class="row mb-4">
    <div class="col-sm-6">
        <button type="button" class="btn btn-primary" @onclick="CreateGame">New Game</button>
    </div>
    <div class="col">
        <input type="text" class="form-control" placeholder="Search by name or genre" @bind="searchString"
            @bind:event="oninput" @onkeyup="FetchGamesAsync" />
    </div>
</div>

@if (games is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DeleteGame Game="@currentGame" OnClose="@onDeleteModalCloseAsync"></DeleteGame>
    <table class="table table-striped table-bordered table-hover">
    <thead class="table-dark">
        <th>Id</th>
        <th>Name</th>
        <th>Genre</th>
        <th>Price</th>
        <th>Release date</th>
        <th></th>
        <th></th>
    </thead>
    <tbody>
        @foreach (var game in games)
            {
                <tr>
                    <td>@game.Id</td>
                    <td>@game.Name</td>
                    <td>@game.Genre</td>
                    <td>@game.Price</td>
                    <td>@game.ReleaseDate.ToString("MM/dd/yyyy")</td>
                    <td><button type="button" class="btn btn-primary" @onclick="(()=>editGame(game.Id))">
                            <i class="oi oi-pencil"></i>Edit
                        </button></td>
                    <td><button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal"
                            @onclick="(()=>currentGame=game)">
                            <i class="oi oi-x"></i>Delete
                        </button></td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private Game[]? games;


    private Game? currentGame;

    private string? searchString;

    protected override async Task OnInitializedAsync()
    {
        await FetchGamesAsync();
    }

    private void CreateGame()
    {
        NavigationManager.NavigateTo("/game");
    }

    private void editGame(int id)
    {
        NavigationManager.NavigateTo($"/game/{id}");
    }

    private async Task onDeleteModalCloseAsync(bool accepted)
    {
        if (accepted)
        {
            await client.DeleteGameAsync(currentGame!.Id);
            await FetchGamesAsync();
        }

    }

    private async Task FetchGamesAsync() => games = await client.GetGamesAsync(searchString);
}
